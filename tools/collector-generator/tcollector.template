// returns data points from {{ .Class }}
// <add link to documentation here> - {{ .Class }} class
package collector
import (
    "log"

    "github.com/StackExchange/wmi"
    "github.com/prometheus/client_golang/prometheus"
)
const {{ .CollectorName }}Subsystem = "{{ .CollectorName | toLower }}"
func init() {
    Factories[{{ .CollectorName }}Subsystem] = {{ .CollectorName }}TemplateCollector
}

// {{ .CollectorName }}TemplateCollector ...
func {{ .CollectorName }}TemplateCollector() (Collector, error) {
    defer trace()()
    return NewTemplateCollector({{ .CollectorName }}Subsystem, &{{ .CollectorName }}Collector)
}

func (c *{{ .CollectorName }}Collector) getMetricDesc(m map[string]*prometheus.Desc) error {
    defer trace()()
{{- range $m := .Members }}
        m["{{ $m.Name | toSnakeCase }}"] = prometheus.NewDesc(
            prometheus.BuildFQName(Namespace, {{ .CollectorName }}Subsystem, "{{ $m.Name | toSnakeCase }}"),
            "({{ $m.Name }})",
            GetLabelNames("lbl"),
            nil,
        )
{{- end }}
    return nil
}

// A {{ .CollectorName }}Collector is a Prometheus collector for WMI {{ .Class }} metrics
type {{ .CollectorName }}Collector struct {
    lobj map[string]{{ .Class }}
}

type {{ .Class }} struct {
    Name string
{{ range $m := .Members }}
    {{ $m.Name }} {{ $m.Type }}
{{- end }}
}

func (c *{{ .CollectorName }}Collector) collect(m map[string]*prometheus.Desc, ch chan<- prometheus.Metric) (CollectableTemplate, error) {
    defer trace()()

    var dst []{{ .Class }}
    q := wmi.CreateQuery(&dst, "")
    if err := wmi.Query(q, &dst); err != nil {
        return nil, err
    }

    for _, data:= range dst {
        c.lobj[data.Name] = data
        lbl := data.Name
        {{ range $m := .Members }}
        if _, ok := m["{{ $m.Name | toSnakeCase  }}"]; ok{
            ch <- prometheus.MustNewConstMetric(
                m["{{ $m.Name | toSnakeCase  }}"],
                prometheus.GaugeValue,
                float64(dst[0].{{ $m.Name }}),
                GetLabelValues(lbl)...,
            )
        }
        {{ end }}
    }
    return nil, nil
}

func (c *{{ .CollectorName }}Collector) getValue(varname string) interface{} {
    defer trace()()
    name, m := ProcessVarName(varname)

    lbl := m["lbl"]

    if lbl == "" {
        t := make([]interface{}, len(c.lobj))
        i :=0
        for k := range c.lobj{
            t[i] = c.getCoreValue(name, k)
            i++
        }
        return t
    }
    return c.getCoreValue(name, lbl)
}

func (c *{{ .CollectorName }}Collector) getCoreValue(varname, lbl string) interface{} {
    defer trace()()
    switch name {
        {{ range $m := .Members }}
        case "{{ $m.Name | toSnakeCase  }}":
            return float64(c.lobj[lbl].{{ $m.Name | toSnakeCase  }})
        {{ end }}
    }
    return 0.
}
